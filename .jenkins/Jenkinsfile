pipeline {
   agent { label 'docker' }

   parameters {
      string (name: 'GIT_BRANCH', defaultValue: 'master', description: 'Git branch to build')
      choice (name: 'DEPLOY_MODE', choices: ['dev', 'test', 'staging'], description: 'Deploy mode')
   }

   environment {
      PRODUCT_RELEASE   = '0.1.0'
      PRODUCT_VERSION   = "${PRODUCT_RELEASE}-${BUILD_NUMBER}"
      APP_IMAGE         = 'minhluantran017/demo-springboot_app'
      DB_IMAGE          = 'minhluantran017/demo-springboot_db'

      GIT_URL           = 'ssh://git@github.com/minhluantran017/demo-springboot.git'
      GIT_CRED          = 'github-ssh-cred'

      // Anchore server URL should be set in Global environment variables of Jenkins 
      // ANCHORE_URL    = 'sec-tools.example.com'
      ANCHORE_CRED      = credentials('anchore-usrpwd-cred')

      // Artifactory URL should be set in Global environment variables of Jenkins
      // ARTIFACTORY_URL= 'http://artifactory.example.com:8081/artifactory'
      ARTIFACTORY_CRED  = credentials('artifactory-api-cred')
      ARTIFACTORY_PATH  = "demo-springboot/${PRODUCT_RELEASE}/Artifacts/${BUILD_NUMBER}"

      // Docker registry URL should be set in Global environment variables of Jenkins 
      // REGISTRY_URL   = 'docker.io' or 'artifacts.example.com:5000'
      REGISTRY_CRED     = 'registry-api-cred'

      // Kubernetes kube config file
      K8S_CONFIG        = credentials("k8s-${DEPLOY_MODE}-config-file")

      MAVEN    = "docker run -it --rm -v ${WORKSPACE}:/apps -w /apps maven:3-jdk-8 mvn"
      NEWMAN   = "docker run -it -v ${WORKSPACE}/tests/functional:/tests -w /tests -t postman/newman:5-alpine"
      JMETER   = "docker run -it -v ${WORKSPACE}/tests/performance:/tests -w /test justb4/jmeter"
      ANCHORE  = "curl -s https://ci-tools.anchore.io/inline_scan-latest | bash -s -- \
                     -u ${ANCHORE_CRED_USER} -p ${ANCHORE_CRED_PSW} -r ${ANCHORE_URL}"
      HELM     = "docker run -it --rm -v ${WORKSPACE}:/apps -w /apps \
                  -v ${K8S_CONFIG}:/root/.kube/config alpine/helm:3-alpine"
   }
   options {
      timestamps()
      timeout(60)
      buildDiscarder logRotator(artifactDaysToKeepStr: '10', artifactNumToKeepStr: '100', 
                                 daysToKeepStr: '30', numToKeepStr: '300')
   }
   triggers {
      // Trigger at 8am daily 
      cron ('0 8 * * *')
   }
   stages {
      stage('Checkout') {
         steps {
            print "Checking out code..."
            git(url: env.GIT_URL, branch: params.GIT_BRANCH, credentialsId: env.GIT_CRED)
         }
      }
      stage('Build') {
         steps {
            print "Compiling code..."
            script {
               sh """
                  ${MAVEN} clean package -Drelease=${PRODUCT_RELEASE} -DbuildNumber=${BUILD_NUMBER}
                  mkdir -p artifacts
                  cp target/*.war artifacts/demo-springboot.war
               """
            }
         }
      }
      stage('Package') {
         failFast true
         parallel {
            stage('Package app') {
               steps {
                  print "Packaging app..."
                  script {
                     sh """
                        docker build -f package/docker/app.dockerfile . -t ${APP_IMAGE}:${PRODUCT_VERSION}
                        docker save ${APP_IMAGE}:${PRODUCT_VERSION} \
                           -o artifacts/demo-springboot_app_${PRODUCT_VERSION}.tar
                     """
                  }
               }
            }
            stage('Package db') {
               steps {
                  print "Packaging db..."
                  script {
                     sh """
                        docker build -f package/docker/db.dockerfile . -t ${DB_IMAGE}:${PRODUCT_VERSION}
                        docker save ${DB_IMAGE}:${PRODUCT_VERSION} \
                           -o artifacts/demo-springboot_db_${PRODUCT_VERSION}.tar
                     """
                  }
               }
            }
         }
      }
      stage('Security check') {
         parallel {
            stage('Analyze app') {
               steps {
                  print "Analyzing application..."
                  script {
                     sh "${ANCHORE} ${APP_IMAGE}:${PRODUCT_VERSION}"
                  }
               }
            }
            stage('Analyze DB') {
               steps {
                  print "Analyzing database..."
                  script {
                     sh "${ANCHORE} ${DB_IMAGE}:${PRODUCT_VERSION}"
                  }
               }
            }
         }
         
      }
      stage('Artifacts') {
         failFast true
         parallel {
            stage('Upload to artifactory') {
               steps {
                  print "Saving to artifactory..."
                  dir('artifacts') {
                     sh """
                        md5sum * >>MD5SUMS.txt
                        for file in `ls .`; do
                           curl -s -X PUT -H "X-JFrog-Art-Api:${ARTIFACTORY_CRED_PSW}" -T ${file}\
                              "${ARTIFACTORY_URL}/${ARTIFACTORY_PATH}/" \
                        done
                     """
                  }
               }
            }
            stage('Upload to Docker registry') {
               steps {
                  script {
                     withDockerRegistry(credentialsId: env.REGISTRY_CRED, url: env.REGISTY_URL) {
                        print 'Uploading images...'
                        sh """
                           docker push ${APP_IMAGE}:${PRODUCT_VERSION}
                           docker push ${APP_IMAGE}:${PRODUCT_VERSION}
                        """
                     }
                  }
               }
            }
         }
      }
      stage('Deploy to test') {
         when {
            not { environment name: 'DEPLOY_MODE', value: 'dev' }
         }
         steps {
            print "Deploying app to test environment..."
            script {
               print "TODO: Helm chart into test env"
               sh "${HELM} version"
            }
         }
      }
      stage('Functional test') {
         when {
            not { environment name: 'DEPLOY_MODE', value: 'dev' }
         }
         steps {
            script {
               print 'Running functional test...'
               sh """
                  ${NEWMAN} --color off postman_api.json--environment=postman_environment.json \
                     --reporters cli,junit --reporter-junit-export="newman-report.xml"
               """
               junit allowEmptyResults: true, testResults: 'tests/functional/newman-report.xml'
            }
         }
      }
      stage('Deploy to staging') {
         when {
            environment name: 'DEPLOY_MODE', value: 'staging'
         }
         steps {
            print "Deploying app to staging environment..."
            script {
               print "TODO: Helm chart into staging env"
               sh "${HELM} version"
               env.TARGET_HOST = sh(returnStdout: true, script: 'echo 127.0.0.1').trim()
            }
         }
      }
      stage('Performance test') {
         when {
            environment name: 'DEPLOY_MODE', value: 'staging'
         }
         steps {
            script {
               sh """
                  ${JMETER} --nongui -Jurl=${TARGET_HOST} \
                           --testfile ./performance_suite.jmx \
                           --logfile ./performance_report.jtl \
	                        --reportatendofloadtests --reportoutputfolder .
               """
            }
         }
      }
   }
   post {
      always {
         echo 'Sending email to user...'
         emailext subject: "[Jenkins] ${JOB_NAME} Build #${BUILD_NUMBER} - ${BUILD_RESULT}",
            body: """
               ${JOB_NAME} Build#${BUILD_NUMBER} - ${BUILD_RESULT}.\n
               Please see detail at ${BUILD_URL}.
            """,
            recipientProviders: [ requestor(), culprits() ]
      }
   }
}